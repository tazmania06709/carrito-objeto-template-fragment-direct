//---------------01:08:18---------------curso javascript #02
Objeto literal

Se denomina objeto literal al objeto cuyas propiedades est�n declaradas textualmente en el c�digo.
mas info

const gato = {
    nombre: 'Valiente',
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"]
}

//-----------------------------------Acceder a los valores
Notaci�n de punto:
js

console.log(gato.nombre)
console.log(gato.duerme)
console.log(gato.enemigos[0]);

Notaci�n de corchetes (nos servir� para recorrerlo):
js

console.log(gato['nombre'])
console.log(gato['edad'])
console.log(gato["enemigos"][0]);
console.log(gato.enemigos[0]);
//-------------------CRUD (propiedades)

------------------Crear (create)
gato.color = 'Azul'

Leer (read)
console.log(gato)

Actualizar (update)
gato.edad = 11

---------------------------Eliminar (delete)
delete gato.duerme

//-----------------hasOwnProperty
A veces es �til comprobar si existe o no la propiedad de un objeto dado. Podemos utilizar el m�todo .hasOwnProperty(propname) para determinar si un objeto tiene una propiedad con ese nombre. .hasOwnProperty() devuelve true o false si se encuentra la propiedad o no.
js

const gato = {
    nombre: 'Valiente',
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"]
}

console.log(gato.hasOwnProperty("nombre"))
console.log(gato.hasOwnProperty("salud"))
//-------------------------------Objetos anidados
const gato = {
    nombre: 'Valiente',
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    otros: {
        amigos: ["Cobarde", "T�mido", "Pegajoso"],
        favoritos: {
            comida: {
                fria: "salm�n",
                caliente: "pollo"
            }
        }
    }
}

//--------------------------------Acceder:
console.log(gato.otros.amigos[0])
console.log(gato.otros.favoritos.comida.fria)

//---------------Encadenamiento opcional
Optional chaining: El operador de encadenamiento opcional ?. permite leer el valor de una propiedad ubicada dentro de una cadena de objetos conectados sin tener que validar expresamente que cada referencia en la cadena sea v�lida.

const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
};
console.log(gato.otros.favoritos);

-------------------------Encadenamiento opcional: resultado undefined.
console.log(gato.otros?.favoritos);
//-----------Nota: los array tienen propiedades y metodos las primeras no llevan parantesis, las segundas si llevan parentisis y pueden llevar algun parametro.
//---------------Propiedades:
Ejemplo
const frutas = ["sand�a", "pera", "melon"];
console.log(frutas.length);

-----------------------------M�todos:
Ejemplo
const frutas = ["sand�a", "pera", "melon"];
frutas.push("banana");
console.log(frutas);
//------------------------M�todos
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer: function () {
        console.log("Ahora est� comiendo");
    },
};

gato.comer();

//---------------------------------Reducido:
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer() {
        console.log("Ahora est� comiendo");
    },
};
gato.comer();
------------------Con par�metros:
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return "Ahora est� comiendo: " + comida;
    },
};
console.log(gato.comer("pez"));
-------------------------�Qu� pasar� con esto?
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return `${nombre} est� comiendo ${comida}`;
    },
};
console.log(gato.comer("pez"));

--------------------Lo est� buscando en el objeto global
const nombre = "Ignacio";
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return `${nombre} est� comiendo ${comida}`;
    },
};
console.log(gato.comer("pez"));
--------------------------------------Objeto this:
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        console.log(this);
    },
};
gato.comer("pez");

-----------------------------------this
Veamos una introducci�n a this
this: Hace referencia al objeto contexto de JavaScript en el cual se est� ejecutando el c�digo actual
m�s info

const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return `${this.nombre} est� comiendo ${comida}`;
    },
};
console.log(gato.comer("pez"));
//-------------------arrow function
--------------------�Esto funcionar�?
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer: (comida) => {
        return `${this.nombre} est� comiendo ${comida}`;
    },
};

console.log(gato.comer("pez"));

----------------------------Arrow Functions
No tiene this o super y no se debe usarla como m�todos.
//---------------------Pero si puedo utilizarla en su interior:
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return `${this.nombre} est� comiendo ${comida}`;
    },
    mostrarEnemigos() {
        return this.enemigos.forEach((item) => console.log(item));
    },
};

gato.mostrarEnemigos();
//------------------------------Recorrer un objeto
for in

for...in

    for in: La instrucci�n for-in itera sobre todas las propiedades enumerables de un objeto que est� codificado por cadenas

const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
};

for (const propiedad in gato) {
    console.log(gato[propiedad]);
}

---------------------------�Por qu� usar for...in?
Dado que for...in est� construido para iterar propiedades de objeto, no se recomienda su uso con arreglos y opciones como Array.prototype.forEach() y existe for...of, �cu�l podr�a ser el uso de for...in?
Es posible que se utilice de forma m�s pr�ctica con fines de depuraci�n, ya que es una forma f�cil de comprobar las propiedades de un objeto (mediante la salida a la consola o de otro modo)
Aunque los arreglos suelen ser m�s pr�cticos para almacenar datos, en situaciones en las que se prefiere un par clave-valor para trabajar con datos (con propiedades que act�an como la "clave"), puede haber casos en los que desees comprobar si alguna de esas claves cumple un valor particular.
//--------------------Object.values()
Object.values(): devuelve un array con los valores correspondientes a las propiedades enumerables de un objeto.

console.log(Object.values(gato));

Con forEach()

Object.values(gato).forEach((item) => console.log(item));

------------------Existen m�s m�todos como:
Object.entries()
Object.key()
Object.getOwnPropertyNames()
//--------------------------------------Destructuring Objects
desestructuraci�n La sintaxis de desestructuraci�n es una expresi�n de JavaScript que permite desempacar valores de arreglos o propiedades de objetos en distintas variables.

const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    otros: {
        amigos: ["Cobarde", "T�mido", "Pegajoso"],
        favoritos: {
            comida: {
                fria: "salm�n",
                caliente: "pollo",
            },
        },
    },
};

const nombreGato = gato.nombre;
console.log(nombreGato);

------------------------------------Destructuring de objetos:

const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    otros: {
        amigos: ["Cobarde", "T�mido", "Pegajoso"],
        favoritos: {
            comida: {
                fria: "salm�n",
                caliente: "pollo",
            },
        },
    },
};

const { nombre, duerme, edad, enemigos } = gato;
console.log(nombre);
console.log(duerme);
console.log(edad);
console.log(enemigos);

--------------------------------Alias:

const { nombre: nombreGato } = gato;
console.log(nombreGato);

--------------------por defecto:

const gato = {
    // nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    otros: {
        amigos: ["Cobarde", "T�mido", "Pegajoso"],
        favoritos: {
            comida: {
                fria: "salm�n",
                caliente: "pollo",
            },
        },
    },
};

const { nombre: nombreGato = "Sin nombre" } = gato;
console.log(nombreGato);

----------------------Anidados:

const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    otros: {
        amigos: ["Cobarde", "T�mido", "Pegajoso"],
        favoritos: {
            comida: {
                fria: "salm�n",
                caliente: "pollo",
            },
        },
    },
};

const {
    otros: { amigos },
} = gato;
console.log(amigos);

//---------------------------------------------Array

La destructuring tambi�n sirve para Array, solo reemplazar por []

//-------------Array destructuracion
const enemigos = ["agua", "perros"]
const [agua, perro] = enemigos;
console.log(agua);
console.log(perro);
// const enemigos = ["agua", "perros"];
// const [pos1, pos2] = enemigos;
// console.log(pos1,pos2);

-------------------------M�todos:
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return `${this.nombre} est� comiendo ${comida}`;
    },
    mostrarEnemigos() {
        return this.enemigos.forEach((item) => console.log(item));
    },
};

const { comer } = gato;
console.log(comer("pez"));

// undefined est� comiendo pez
Nota: porque no se puede destructurar una metodo que dentro tenga this.....
const  comer = gato.comer('pez');
console.log(comer);
//---------------------------Getters y Setters
info
get: Enlaza la propiedad de un objeto con una funci�n que ser� llamada cuando la propiedad es buscada.
set: La sintaxis set asocia la propiedad de un objeto a una funci�n que ser� llamada cuando haya un intento de asignar valor a esa propiedad.

GET: Tenga en cuenta lo siguiente al trabajar con la sintaxis get:

    Debe tener exactamente cero parametros.
    No debe haber m�ltiples getters para una misma propiedad.

SET: Tenga en cuenta lo siguiente al trabajar con setters:

    Debe tener exactamente un par�mentro

-------------------------------------------------
const gato = {
    nombre: "Valiente",
    duerme: true,
    edad: 10,
    enemigos: ["agua", "perros"],
    comer(comida) {
        return `${this.nombre} est� comiendo ${comida}`;
    },
    get nombreMayuscula() {
        return this.nombre.toUpperCase();
    },
    set nuevoEnemigo(nuevo) {
        this.enemigos.push(nuevo);
    },
};

//---------------------- GET
console.log(gato.nombreMayuscula);

//--------------------------- SET
gato.nuevoEnemigo = "batman";
console.log(gato.enemigos);

por valor vs por referencia
  fuente
    por valor: Cuando asignamos valores primitivos (Boolean, Null, Undefined, Number, String y Symbol), el valor asignado es una copia del valor que estamos asignando.
    por referencia: Pero cuando asignamos valores NO primitivos o complejos (Object, Array y Function), JavaScript copia �la referencia�, lo que implica que no se copia el valor en s�, si no una referencia a trav�s de la cual accedemos al valor original.

--------------------------------Primitivos: (por valor)

let a = "hola";
let b = a;
console.log(b);

Si cambiamos el valor de a, b sigue siendo "hola"
js

a = "chao";
console.log(b);

-----------------No primitivos: (por referencia)
js

let a = ["hola"];
let b = a;
console.log(b);

js

let a = ["hola"];
let b = a;

a.push("chao");

console.log(b);

------------------------------Lo mismo pasa con los objetos:
js

const a = {
    nombre: "hola",
};

const b = a;

a.nombre = "chao";

console.log(b);


//--------------------------------------------------VIDEO TIME 02:24:00----------------------------------

console.log( "😍😍😍🤣😜");
// console.log(document);


// console.log(document.head);
// console.log(document.title);
// console.log(document.body);
// console.log(document.domain);



// const gato = {
//     nombre: "Valiente",
//     duerme: true,
//     edad: 10,
//     enemigos: ["agua", "perros"],
//     comer(comida) {
//         return `${this.nombre} está comiendo ${comida}`;
//     },
//     mostrarEnemigos() {
//         return this.enemigos.forEach((item) => console.log(item));
//     },
// };

// const  comer = gato.comer('pez');
// console.log(comer);

// undefined está comiendo pez